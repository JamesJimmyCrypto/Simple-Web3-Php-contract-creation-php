<?php

namespace Tests\Fixtures;

use Tests\TestCase;

class TupleFixture extends TestCase
{
    public static function validEncoderNestedArrayData()
    {
        return [
            [
                //tuple(uint[])
                "tuple" => json_decode('{"type": "tuple","components": [{"type" : "uint256[]"}]}'),
                "values" => [[0, 1, 2, 3, 4, 5]],
                "dynamic" => true,
                "result" => '0x
            ], [
                //tuple(bool,address,bytes32[])
                "tuple" => json_decode('{"internalType":"struct BetMarketx","name":"market","type":"tuple","components":[{"internalType":"bool","name":"isCompound","type":"bool"},{"internalType":"address","name":"currency","type":"address"},{"internalType":"bytes32[]","name":"bets","type":"bytes32[]"}]}'),
                "values" => [false, "0x0000000000000000000000000000000000000000", [
                    "0xb0b2a0285d655cc0f5acfbbc7f10a7ec3a60414a6b1edefdabdf4787462a2184",
                    "0xf6d343f8d273ef1002091f714ecb214b90ee42c56d380966ddac42008b854ce4"
                ]],
                "dynamic" => true,
                "result" => '0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000002b0b2a0285d655cc0f5acfbbc7f10a7ec3a60414a6b1edefdabdf4787462a2184f6d343f8d273ef1002091f714ecb214b90ee42c56d380966ddac42008b854ce4',
            ]
        ];
    }

    public static function validEncoderData()
    {
        return [
            [
                "components" => [
                    ["type" => 'uint8', "name" => ''],
                    ["type" => 'bool', "name" => ''],
                ],
                "values" => [69, true],
                "dynamic" => false,
                "result" => '00000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001',
            ],
            [
                "components" => [
                    ["type" => 'bool', "name" => ''],
                    [
                        "type" => 'tuple',
                        "name" => '',
                        "components" => [
                            ["type" => 'uint8', "name" => ''],
                            ["type" => 'bool', "name" => ''],
                        ],
                    ],
                ],
                "values" => [true, [69, true]],
                "dynamic" => false,
                "result" => '000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001',
            ],
            [
                "components" => [
                    ["type" => 'bool', "name" => 'y'],
                    ["type" => 'bool', "name" => 'z'],
                ],
                "values" => ["y" => false, "z" => true],
                "dynamic" => false,
                "result" => '00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001',
            ],
        ];
    }

    public static function validDecoderData()
    {
        return [
            [
                "components" => [
                    ["type" => 'uint8', "name" => ''],
                    ["type" => 'bool', "name" => ''],
                ],
                "result" => ["0" => 69, "1" => true],
                "bytes" => '0x00000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001',
                "remaining" => '0x',
            ],
            [
                "components" => [
                    ["type" => 'bool', "name" => ''],
                    [
                        "type" => 'tuple',
                        "name" => 'subTuple',
                        "components" => [
                            ["type" => 'uint8', "name" => ''],
                            ["type" => 'bool', "name" => ''],
                        ],
                    ],
                ],
                "result" => [
                    "0" => true,
                    "1" => ["0" => 69, "1" => true],
                    "subTuple" => ["0" => 69, "1" => true],
                ],
                "bytes" => '000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000000000000000001',
                "remaining" => '0x',
            ],
            [
                "components" => [
                    ["type" => 'string', "name" => ''],
                    ["type" => 'bool', "name" => ''],
                    [
                        "type" => 'tuple',
                        "name" => '',
                        "components" => [
                            ["type" => 'bool', "name" => ''],
                            ["type" => 'string', "name" => ''],
                        ],
                    ],
                ],
                "result" => [
                    "0" => 'marin123123123123',
                    "1" => true,
                    "2" => [
                        "0" => true,
                        "1" => 'web3jstestinglongstriiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiing',
                    ],
                ],
                "bytes" => '0x0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000116d6172696e31323331323331323331323300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000003c776562336a7374657374696e676c6f6e6773747269696969696969696969696969696969696969696969696969696969696969696969696969696e6700000000',
                "remaining" => '0x',
            ],
        ];
    }
}
